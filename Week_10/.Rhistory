#get predictions and convert from continuous reponse to binary by rounding to 0 or 1
predictions<-round(fitted(model))
predictions
# generate confusion matrix - 0,0 means model predicts 0 and actual was 0
confusion <- table(val[,11], predictions)
confusion
# Compute accuracy on val
accu <- sum(diag(confusion))/nrow(val)
accu
#final test with best hyperparameters
model<-kknn(V11~.,train,test,k=2,distance=2,kernel="rectangular")
#get predictions and convert from continuous reponse to binary by rounding to 0 or 1
predictions<-round(fitted(model))
predictions
# generate confusion matrix - 0,0 means model predicts 0 and actual was 0
confusion <- table(test[,11], predictions)
confusion
# Compute accuracy on val
accu <- sum(diag(confusion))/nrow(test)
accu
data()
data(iris)
data("iris")
data(iris)
head(iris)
summary(iris)
model <- kmeans(iris)
model <- kmeans(iris,3)
model <- kmeans(iris[1:4,],3)
model <- kmeans(iris,3)
View(iris)
model
fit.km <- kmeans(iris, 3, nstart=25)
type(iris)
fit.km <- kmeans(iris[1:4,], 3, nstart=25)
class(iris)
fit.km <- kmeans(iris[1:4,], centers=3, nstart=25)
fit.km <- kmeans(iris[,5], centers=3)
View(iris)
fit.km <- kmeans(iris[,1:4], centers=3)
clusters <- kmeans(iris[,1:4], centers=3)
#load data
data(iris)
head(iris)
summary(iris)
class(iris)
clusters <- kmeans(iris[,1:4], centers=3)
clusters
clusters <- kmeans(iris[,3:4], centers=3)
clusters
clusters <- kmeans(iris[,2:4], centers=3)
clusters
clusters <- kmeans(iris[,3:4], centers=3)
clusters
View(iris)
clusters
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#load ggplot for plotting results
library(ggplot2)
#load ggplot for plotting results
library(ggplot)
install.packages("ggplot2")
#load ggplot for plotting results
library(ggplot2)
install.packages(c("digest", "MASS", "mgcv", "RCurl", "rpart"))
install.packages("ggplot2")
install.packages("ggplot2")
plot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
install.packages("ggplot2")
getwd()
setwd(/Users/dave)
setwd(Users/dave)
setwd(~Users/dave)
setwd()
setwd(/dave)
setwd(dave/)
setwd(dave)
getwd
getwd()
cd ..
cd..
setwd('/Users/dave')
getwd()
install.packages("ggplot2")
install.packages("ggplot2")
#create table of clusters and species
table(clusters$cluster, iris$Species)
#ggplot2(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
plot(iris)
#ggplot2(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
plot(iris$Petal.Length, iris$Petal.Width)
#ggplot2(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
plot(iris$Petal.Length, iris$Petal.Width, color = Species)
#ggplot2(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
plot(iris$Petal.Length, iris$Petal.Width, Species)
#ggplot2(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
plot(iris$Petal.Length, iris$Petal.Width, iris$Species)
#ggplot2(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
plot(iris$Petal.Length, iris$Petal.Width, color = iris$Species)
install.packages("ggplot2")
#load ggplot for plotting results
library(ggplot2)
ggplot2(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#load ggplot for plotting results
library(ggplot2)
#load and inspect data
data(iris)
head(iris)
summary(iris)
class(iris)
#initialize model
clusters <- kmeans(iris[,3:4], centers=3)
clusters
#create table of clusters and species
table(clusters$cluster, iris$Species)
ggplot2(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
irisCluster$cluster <- as.factor(irisCluster$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$cluster)) + geom_point()
clusters$cluster <- as.factor(clusters$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$cluster)) + geom_point()
ggplot(iris, aes(Petal.Length, Petal.Width, color = clusters$cluster)) + geom_point()
#load ggplot for plotting results
library(ggplot2)
#load and inspect data
data(iris)
head(iris)
summary(iris)
class(iris)
#initialize model
clusters <- kmeans(iris[,3:4], centers=3)
clusters
#create table of clusters and species
table(clusters$cluster, iris$Species)
#plot petal length vs. width
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#clusters$cluster <- as.factor(clusters$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = clusters$cluster)) + geom_point()
clusters$cluster <- as.factor(clusters$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = clusters$cluster)) + geom_point()
Clusters <- as.factor(clusters$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point()
#load ggplot for plotting results
library(ggplot2)
#load and inspect data
data(iris)
head(iris)
summary(iris)
class(iris)
#initialize model
iris_clusters <- kmeans(iris[,3:4], centers=3)
iris_clusters
#create table of clusters and species
table(iris_clusters$cluster, iris$Species)
#plot petal length vs. width
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
Clusters <- as.factor(iris_clusters$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point()
table(Clusters, iris$Species)
#plot petal length vs. width, color points by species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#plot petal length vs. width, color points by species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point()
#plot petal length vs. width, color points by cluster
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point()
#plot petal length vs. width, color points by species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#plot petal length vs. width, color points by cluster
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point()
#initialize model
iris_clusters <- kmeans(iris[,1:4], centers=3)
iris_clusters
#initialize model
iris_clusters <- kmeans(iris[,3:4], centers=3)
iris_clusters
#create table of clusters and species
Clusters <- as.factor(iris_clusters$cluster)
table(Clusters, iris$Species)
#plot petal length vs. width, color points by species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#plot petal length vs. width, color points by cluster
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point()
source('~/isye6501/Week 2/4.2.R')
source('~/isye6501/Week 2/4.2.R')
#initialize model, test different ks and factors
iris_clusters <- kmeans(iris[,3:4], centers=3)
plot(iris)
#load ggplot for plotting results
library(ggplot2)
#load and inspect data
data(iris)
head(iris)
summary(iris)
class(iris)
#plot relationships between combo of predictors based on thise plot it looks
#like petal length and petal width are best predictors
plot(iris) -
#initialize model, test different ks and predictors
iris_clusters <- kmeans(iris[,3:4], centers=3)
iris_clusters
#create table of clusters and species
Clusters <- as.factor(iris_clusters$cluster)
table(Clusters, iris$Species)
ggplot(table(Clusters, iris$Species))
PLOT(table(Clusters, iris$Species))
PLOT(table(Clusters, iris$Species))
plot(table(Clusters, iris$Species))
df<-table(Clusters, iris$Species)
ggplot(as.data.frame(table(df)), aes(x=gender, y = Freq, fill=fraud)) + geom_bar(stat="identity")
ggplot(as.data.frame(table(df)), aes(x=gender, y = Freq, fill=fraud))
ggplot(as.data.frame(table(df)), aes(x=Clusters, y = iris$Species, fill=fraud))
ggplot(as.data.frame(table(df)), aes(x=Clusters, y = iris$Species))
ggplot(as.data.frame(table(df))
ggplot(as.data.frame(table(df)
ggplot(as.data.frame(table(df)))
df<-as.dataframe(table(Clusters, iris$Species))
ggplot(df)
df<-as.data.frame(table(Clusters, iris$Species))
ggplot(df)
ggplot(df, aes(x=Clusters))
ggplot(df, aes(x=Clusters) + geom_bar(y = iris$Species)
df<-as.data.frame(table(Clusters, iris$Species))
ggplot(df, aes(x=Clusters) + geom_bar(y = iris$Species)
df<-as.data.frame(table(Clusters, iris$Species))
#create table of clusters and species
Clusters <- as.factor(iris_clusters$cluster)
df<-as.data.frame(table(Clusters, iris$Species))
ggplot(df, aes(x=Clusters) + geom_bar(y = iris$Species)
ggplot(df, aes(x=Clusters) + geom_bar(y = iris$Species))
ggplot(df, aes(x=Clusters)) + geom_bar(y = iris$Species)
ggplot(df, aes(x=Clusters)) + geom_bar()
ggplot(df) + geom_bar()
ggplot(df, aes(Clusters, iris$Species)) + geom_bar()
ggplot(df, aes(x=Clusters, y=iris$Species)) + geom_bar()
df<-as.data.frame(table(Clusters, iris$Species))
df
table(Clusters, iris$Species))
table(Clusters, iris$Species)
#plot petal length vs. width, color points by cluster - very close to species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_encircle()
install.packages("ggalt")
#plot petal length vs. width, color points by cluster - very close to species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() geom_encircle(s_shape=0.5, expand=0.1, colour="purple")
#plot petal length vs. width, color points by cluster - very close to species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() + geom_encircle(s_shape=0.5, expand=0.1, colour="purple")
library(ggalt)
#plot petal length vs. width, color points by cluster - very close to species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() + geom_encircle(s_shape=0.5, expand=0.1, colour="purple")
#plot petal length vs. width, color points by cluster - very close to species
ss1<-(subset(iris, Species == setosa)
#plot petal length vs. width, color points by cluster - very close to species
ss1<-(subset(iris, Species == setosa))
#plot petal length vs. width, color points by cluster - very close to species
ss1<-(subset(iris, Species == setosa))
View(iris)
#plot petal length vs. width, color points by cluster - very close to species
ss1<-(subset(iris$Species == setosa ))
#plot petal length vs. width, color points by cluster - very close to species
ss1<-subset(iris$Species == setosa)
View(iris)
#plot petal length vs. width, color points by cluster - very close to species
ss1<-subset(iris, x == 1:50)
#plot petal length vs. width, color points by cluster - very close to species
ss1<-subset(iris, 1:50)
#plot petal length vs. width, color points by cluster - very close to species
ss1<-iris[1:50]
#plot petal length vs. width, color points by cluster - very close to species
ss1<-iris[1:50,]
ss3<-iris[101-150,]
ss3<-iris[101:150,]
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() + geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red")
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="green")
ss2<-iris[51:100,]
ss3<-iris[101:150,]
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="blue") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="green")
ss2<-Clusters[51:100,]
iris_clusters
#plot relationships between combo of predictors based on thise plot it looks
#like petal length and petal width are best predictors
plot(iris) -
#initialize model, test different ks and predictors
iris_cluster_model <- kmeans(iris[,3:4], centers=3)
iris_cluster_model
Clusters
table(Clusters, iris$Species)
ss2<-Clusters[51:100]
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="blue") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="green")
ss2<-iris_cluster_model$cluster[51:100]
#plot relationships between combo of predictors based on thise plot it looks
#like petal length and petal width are best predictors
plot(iris) -
#initialize model, test different ks and predictors
iris_cluster_model <- kmeans(iris[,3:4], centers=3)
iris_cluster_model
#create table of clusters and species
Clusters <- as.factor(iris_cluster_model$cluster)
Clusters
table(Clusters, iris$Species)
#plot petal length vs. width, color points by species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#plot petal length vs. width, color points by cluster - very close to species
ss1<-iris[1:50,]
ss2<-iris_cluster_model$cluster[51:100]
ss3<-iris[101:150,]
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="blue") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="green")
#load ggplot and ggalt for plotting results
library(ggplot2)
library(ggalt)
#load and inspect data
data(iris)
head(iris)
summary(iris)
class(iris)
#plot relationships between combo of predictors based on thise plot it looks
#like petal length and petal width are best predictors
plot(iris) -
#initialize model, test different ks and predictors
iris_cluster_model <- kmeans(iris[,3:4], centers=3)
iris_cluster_model
#plot relationships between combo of predictors based on thise plot it looks
#like petal length and petal width are best predictors
plot(iris)
#initialize model, test different ks and predictors
iris_cluster_model <- kmeans(iris[,3:4], centers=3)
iris_cluster_model
#create table of clusters and species
Clusters <- as.factor(iris_cluster_model$cluster)
Clusters
table(Clusters, iris$Species)
#plot petal length vs. width, color points by species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#plot petal length vs. width, color points by cluster - very close to species
ss1<-iris[1:50,]
ss2<-iris_cluster_model$cluster[51:100]
ss3<-iris[101:150,]
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="blue") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="green")
ss2<-subset(iris, iris_cluster_model$cluster = 2)
ss2<-subset(iris, iris_cluster_model$cluster == 2)
ss3<-subset(iris, iris_cluster_model$cluster == 3)
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="blue") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="green")
ss3<-subset(iris, iris_cluster_model$cluster == 2)
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="green") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="blue")
ss2<-subset(iris, iris_cluster_model$cluster == 2)
ss3<-subset(iris, iris_cluster_model$cluster == 3)
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="green") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.1, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.1, expand=0.1, colour="green") +
geom_encircle(data=ss3, s_shape=0.1, expand=0.1, colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.1, expand=0.5, colour="red") +
geom_encircle(data=ss2, s_shape=0.1, expand=0.5, colour="green") +
geom_encircle(data=ss3, s_shape=0.1, expand=0.5, colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.1, expand=0., colour="red") +
geom_encircle(data=ss2, s_shape=0.1, expand=0., colour="green") +
geom_encircle(data=ss3, s_shape=0.1, expand=0., colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0., colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0., colour="green") +
geom_encircle(data=ss3, s_shape=0.5, expand=0., colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.01, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.01, colour="green") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.01, colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.05, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.05, colour="green") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.05, colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.0, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.0, colour="green") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.0, colour="blue")
#load ggplot and ggalt for plotting results
library(ggplot2)
library(ggalt)
#load and inspect data
data(iris)
head(iris)
summary(iris)
class(iris)
#plot relationships between combo of predictors based on thise plot it looks
#like petal length and petal width are best predictors
plot(iris)
#initialize model, test different ks and predictors
iris_cluster_model <- kmeans(iris[,3:4], centers=3)
iris_cluster_model
#create table of clusters and species
Clusters <- as.factor(iris_cluster_model$cluster)
Clusters
table(Clusters, iris$Species)
#plot petal length vs. width, color points by species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#plot petal length vs. width, color points by cluster - very close to species
ss1<-subset(iris, iris_cluster_model$cluster == 1)
ss2<-subset(iris, iris_cluster_model$cluster == 2)
ss3<-subset(iris, iris_cluster_model$cluster == 3)
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.0, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.0, colour="green") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.0, colour="blue")
head(iris)
summary(iris)
#packages
library(ggplot2)
library(reshape2)
library(VIM)
library(mice)
library(caret)
#set Directory to data path
setwd('/Users/dave/isye6501/Week_10')
#create table of crime data with headers
data<-read.csv("breast-cancer-wisconsin.data.txt", header = TRUE)
#Check class and inspect data
str(data)
head(data)
summary(data)
#column x1.3 has missing values as "?" - replace with "NA"
data$X1.3 <- as.character(data$X1.3)
data$X1.3[data$X1.3 == "?"] <- NA
data$X1.3 <- as.numeric(data$X1.3)
data$X2.1 <- as.factor(data$X2.1)
#use 'mice' package for imputation
methods(mice)
md.pattern(data)
aggr_plot <- aggr(data, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
#Impute missing values using mean, linear regression, and linear regression with perturbation
meanimp <- mice(data, method = 'mean')
datamean <- complete(meanimp)
regimp <- mice(data, method = 'norm.predict')
datareg <- complete(regimp)
regperimp <- mice(data, method = 'norm.nob')
dataregper <- complete(regperimp)
View(dataregper)
View(datamean)
#Check accuracy of each method using KNN model, also check results with just removing NA
trControl <- trainControl(method  = "cv",
number  = 5)
datanadrop <- na.omit(data)
databinary <- data
databinary$bin <- complete.cases(databinary)
databinary$X1.3[is.na(databinary$X1.3)] <- 0
fitmean <- train(X2.1 ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = datamean)
fitreg <- train(X2.1 ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = datareg)
fitregper <- train(X2.1 ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = dataregper)
fitnadrop <- train(X2.1 ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = datanadrop)
fitbinary <- train(X2.1 ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = databinary)
fitmean
fitreg
fitregper
fitnadrop
fitbinary
fitmean
fitmean
fitreg
fitregper
fitnadrop
fitbinary
fitmean
fitreg
fitregper
fitnadrop
fitbinary
