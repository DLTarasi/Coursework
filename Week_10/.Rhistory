ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() + geom_encircle(s_shape=0.5, expand=0.1, colour="purple")
library(ggalt)
#plot petal length vs. width, color points by cluster - very close to species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() + geom_encircle(s_shape=0.5, expand=0.1, colour="purple")
#plot petal length vs. width, color points by cluster - very close to species
ss1<-(subset(iris, Species == setosa)
#plot petal length vs. width, color points by cluster - very close to species
ss1<-(subset(iris, Species == setosa))
#plot petal length vs. width, color points by cluster - very close to species
ss1<-(subset(iris, Species == setosa))
View(iris)
#plot petal length vs. width, color points by cluster - very close to species
ss1<-(subset(iris$Species == setosa ))
#plot petal length vs. width, color points by cluster - very close to species
ss1<-subset(iris$Species == setosa)
View(iris)
#plot petal length vs. width, color points by cluster - very close to species
ss1<-subset(iris, x == 1:50)
#plot petal length vs. width, color points by cluster - very close to species
ss1<-subset(iris, 1:50)
#plot petal length vs. width, color points by cluster - very close to species
ss1<-iris[1:50]
#plot petal length vs. width, color points by cluster - very close to species
ss1<-iris[1:50,]
ss3<-iris[101-150,]
ss3<-iris[101:150,]
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() + geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red")
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="green")
ss2<-iris[51:100,]
ss3<-iris[101:150,]
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="blue") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="green")
ss2<-Clusters[51:100,]
iris_clusters
#plot relationships between combo of predictors based on thise plot it looks
#like petal length and petal width are best predictors
plot(iris) -
#initialize model, test different ks and predictors
iris_cluster_model <- kmeans(iris[,3:4], centers=3)
iris_cluster_model
Clusters
table(Clusters, iris$Species)
ss2<-Clusters[51:100]
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="blue") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="green")
ss2<-iris_cluster_model$cluster[51:100]
#plot relationships between combo of predictors based on thise plot it looks
#like petal length and petal width are best predictors
plot(iris) -
#initialize model, test different ks and predictors
iris_cluster_model <- kmeans(iris[,3:4], centers=3)
iris_cluster_model
#create table of clusters and species
Clusters <- as.factor(iris_cluster_model$cluster)
Clusters
table(Clusters, iris$Species)
#plot petal length vs. width, color points by species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#plot petal length vs. width, color points by cluster - very close to species
ss1<-iris[1:50,]
ss2<-iris_cluster_model$cluster[51:100]
ss3<-iris[101:150,]
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="blue") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="green")
#load ggplot and ggalt for plotting results
library(ggplot2)
library(ggalt)
#load and inspect data
data(iris)
head(iris)
summary(iris)
class(iris)
#plot relationships between combo of predictors based on thise plot it looks
#like petal length and petal width are best predictors
plot(iris) -
#initialize model, test different ks and predictors
iris_cluster_model <- kmeans(iris[,3:4], centers=3)
iris_cluster_model
#plot relationships between combo of predictors based on thise plot it looks
#like petal length and petal width are best predictors
plot(iris)
#initialize model, test different ks and predictors
iris_cluster_model <- kmeans(iris[,3:4], centers=3)
iris_cluster_model
#create table of clusters and species
Clusters <- as.factor(iris_cluster_model$cluster)
Clusters
table(Clusters, iris$Species)
#plot petal length vs. width, color points by species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#plot petal length vs. width, color points by cluster - very close to species
ss1<-iris[1:50,]
ss2<-iris_cluster_model$cluster[51:100]
ss3<-iris[101:150,]
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="blue") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="green")
ss2<-subset(iris, iris_cluster_model$cluster = 2)
ss2<-subset(iris, iris_cluster_model$cluster == 2)
ss3<-subset(iris, iris_cluster_model$cluster == 3)
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="blue") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="green")
ss3<-subset(iris, iris_cluster_model$cluster == 2)
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="green") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="blue")
ss2<-subset(iris, iris_cluster_model$cluster == 2)
ss3<-subset(iris, iris_cluster_model$cluster == 3)
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="green") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.1, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.1, expand=0.1, colour="green") +
geom_encircle(data=ss3, s_shape=0.1, expand=0.1, colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.1, expand=0.5, colour="red") +
geom_encircle(data=ss2, s_shape=0.1, expand=0.5, colour="green") +
geom_encircle(data=ss3, s_shape=0.1, expand=0.5, colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.1, expand=0., colour="red") +
geom_encircle(data=ss2, s_shape=0.1, expand=0., colour="green") +
geom_encircle(data=ss3, s_shape=0.1, expand=0., colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0., colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0., colour="green") +
geom_encircle(data=ss3, s_shape=0.5, expand=0., colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.01, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.01, colour="green") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.01, colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.05, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.05, colour="green") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.05, colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.0, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.0, colour="green") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.0, colour="blue")
#load ggplot and ggalt for plotting results
library(ggplot2)
library(ggalt)
#load and inspect data
data(iris)
head(iris)
summary(iris)
class(iris)
#plot relationships between combo of predictors based on thise plot it looks
#like petal length and petal width are best predictors
plot(iris)
#initialize model, test different ks and predictors
iris_cluster_model <- kmeans(iris[,3:4], centers=3)
iris_cluster_model
#create table of clusters and species
Clusters <- as.factor(iris_cluster_model$cluster)
Clusters
table(Clusters, iris$Species)
#plot petal length vs. width, color points by species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#plot petal length vs. width, color points by cluster - very close to species
ss1<-subset(iris, iris_cluster_model$cluster == 1)
ss2<-subset(iris, iris_cluster_model$cluster == 2)
ss3<-subset(iris, iris_cluster_model$cluster == 3)
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.0, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.0, colour="green") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.0, colour="blue")
head(iris)
summary(iris)
#packages
library(glmnet)
library(ggplot2)
library(reshape2)
#set Directory to data path
setwd('/Users/dave/isye6501/Week_10')
#create table of crime data with headers
bcdata<-read.table("breast-cancer-wisconsin.data.txt", header = TRUE)
#Check class and inspect data
class(bcdata)
head(bcdata)
summary(bcdata)
View(bcdata)
#create table of crime data with headers
bcdata<-read.csv("breast-cancer-wisconsin.data.txt", header = TRUE)
View(bcdata)
#Check class and inspect data
str(bcdata)
#packages
library(ggplot2)
library(reshape2)
#set Directory to data path
setwd('/Users/dave/isye6501/Week_10')
#create table of crime data with headers
data<-read.csv("breast-cancer-wisconsin.data.txt", header = TRUE)
#Check class and inspect data
str(data)
head(data)
summary(data)
#column x1.3 has missing values
library(VIM)
aggr_plot <- aggr(data, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
install.packages("VIM")
#column x1.3 has missing values
library(mice)
install.packages("mice")
#column x1.3 has missing values
library(mice)
methods(mice)
md.pattern(data)
library(VIM)
library(VIM)
aggr_plot <- aggr(data, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
md.pattern(data)
#Check class and inspect data
str(data)
data$X1.3
mean(data$X1.3)
#Check class and inspect data
str(data)
#column x1.3 has missing values
data$X1.3 <- as.character(data$X1.3)
data$X1.3[data$X1.3 == "?"] <- NaN
data$X1.3 <- as.factor(data$X1.3)
#Check class and inspect data
str(data)
View(data)
md.pattern(data)
library(VIM)
aggr_plot <- aggr(data, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
data$X1.3
#column x1.3 has missing values
data$X1.3 <- as.character(data$X1.3)
data$X1.3[data$X1.3 == "?"] <- Na
#column x1.3 has missing values
data$X1.3 <- as.character(data$X1.3)
data$X1.3[data$X1.3 == "?"] <- ''
data$X1.3 <- as.factor(data$X1.3)
library(mice)
methods(mice)
md.pattern(data)
library(VIM)
aggr_plot <- aggr(data, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
data$X1.3
#packages
library(ggplot2)
library(reshape2)
library(VIM)
#set Directory to data path
setwd('/Users/dave/isye6501/Week_10')
#create table of crime data with headers
data<-read.csv("breast-cancer-wisconsin.data.txt", header = TRUE)
#Check class and inspect data
str(data)
head(data)
summary(data)
#column x1.3 has missing values
data$X1.3 <- as.character(data$X1.3)
data$X1.3[data$X1.3 == "?"] <- ''
data$X1.3 <- as.factor(data$X1.3)
library(mice)
methods(mice)
md.pattern(data)
library(VIM)
aggr_plot <- aggr(data, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
data$X1.3
#packages
library(ggplot2)
library(reshape2)
library(VIM)
#set Directory to data path
setwd('/Users/dave/isye6501/Week_10')
#create table of crime data with headers
data<-read.csv("breast-cancer-wisconsin.data.txt", header = TRUE)
#Check class and inspect data
str(data)
head(data)
summary(data)
#column x1.3 has missing values
data$X1.3 <- as.character(data$X1.3)
data$X1.3[data$X1.3 == "?"] <- NA
data$X1.3 <- as.factor(data$X1.3)
library(mice)
methods(mice)
md.pattern(data)
library(VIM)
aggr_plot <- aggr(data, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
data$X1.3
#packages
library(ggplot2)
library(reshape2)
library(VIM)
library(mice)
#set Directory to data path
setwd('/Users/dave/isye6501/Week_10')
#create table of crime data with headers
data<-read.csv("breast-cancer-wisconsin.data.txt", header = TRUE)
#Check class and inspect data
str(data)
head(data)
summary(data)
#column x1.3 has missing values sa "?" - replace with "NA"
data$X1.3 <- as.character(data$X1.3)
data$X1.3[data$X1.3 == "?"] <- NA
data$X1.3 <- as.numeric(data$X1.3)
#use 'mice' package for imputation
methods(mice)
md.pattern(data)
aggr_plot <- aggr(data, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
mice(data, method = mean)
mice(data, method = 'mean')
meandata = mice(data, method = 'mean')
View(meandata)
meandata$data
meandata = mice(data, method = 'mean')$data
View(meandata)
meandata = mice(data, method = 'mean')
View(meandata)
regdata = mice(data, method = 'norm')
#packages
library(ggplot2)
library(reshape2)
library(VIM)
library(mice)
#set Directory to data path
setwd('/Users/dave/isye6501/Week_10')
#create table of crime data with headers
data<-read.csv("breast-cancer-wisconsin.data.txt", header = TRUE)
#Check class and inspect data
str(data)
head(data)
summary(data)
#column x1.3 has missing values as "?" - replace with "NA"
data$X1.3 <- as.character(data$X1.3)
data$X1.3[data$X1.3 == "?"] <- NA
data$X1.3 <- as.numeric(data$X1.3)
#use 'mice' package for imputation
methods(mice)
md.pattern(data)
aggr_plot <- aggr(data, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
meanimp = mice(data, method = 'mean')
regimp = mice(data, method = 'norm')
regperimp = mice(data, method = 'mean')
View(meanimp)
complete(meanimp)
?complete
meanimp <- mice(data, method = 'mean')
datamean <- complete(meanimp)
regimp <- mice(data, method = 'norm.predict')
datatreg <- complete(regimp)
regperimp <- mice(data, method = 'norm.nob')
dataregper <- complete(regperimp)
View(meandata)
View(datatreg)
View(dataregper)
install.packages("caret")
library(caret)
fitmean <- train(Species ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = datamean)
View(data)
fitmean <- train(X2.1 ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = datamean)
#Check accuracy of each method using SVM model
trControl <- trainControl(method  = "cv",
number  = 5)
fitmean <- train(X2.1 ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = datamean)
#packages
library(ggplot2)
library(reshape2)
library(VIM)
library(mice)
library(caret)
#set Directory to data path
setwd('/Users/dave/isye6501/Week_10')
#create table of crime data with headers
data<-read.csv("breast-cancer-wisconsin.data.txt", header = TRUE)
#Check class and inspect data
str(data)
head(data)
summary(data)
#column x1.3 has missing values as "?" - replace with "NA"
data$X1.3 <- as.character(data$X1.3)
data$X1.3[data$X1.3 == "?"] <- NA
data$X1.3 <- as.numeric(data$X1.3)
data$X2.1 <- as.factor(data$X2.1)
#use 'mice' package for imputation
methods(mice)
md.pattern(data)
aggr_plot <- aggr(data, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
meanimp <- mice(data, method = 'mean')
#Impute missing values using mean, linear regression, and linear regression with perturbation
datamean <- complete(meanimp)
regimp <- mice(data, method = 'norm.predict')
datatreg <- complete(regimp)
regperimp <- mice(data, method = 'norm.nob')
dataregper <- complete(regperimp)
#Check accuracy of each method using SVM model
trControl <- trainControl(method  = "cv",
number  = 5)
fitmean <- train(X2.1 ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = datamean)
fitreg <- train(X2.1 ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = datareg)
datareg <- complete(regimp)
fitreg <- train(X2.1 ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = datareg)
fitregper <- train(X2.1 ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = dataregper)
fitmean
fitreg
fitregper
fitmean
fitreg
fitregper
fitbase <- train(X2.1 ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = data)
datanadrop<- na.omit(data)
fitnadrop <- train(X2.1 ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = datanadrop)
firnadrop
fitnadrop
databinary <- complete.cases(data)
fitnbinary <- train(X2.1 ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = databinary)
databinary <- complete.cases(data)
databinary$bin <- complete.cases(data)
View(databinary)
databinary <- data
databinary$bin <- complete.cases(data)
databinary <- data
databinary <- complete.cases(databinary)
databinary <- data
databinary$bin <- complete.cases(databinary)
View(databinary)
fitnbinary <- train(X2.1 ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = databinary)
View(databinary)
View(databinary)
databinary$X1.3[databinary$X1.3 == NA] <- 0
View(databinary)
databinary$X1.3[is.na(databinary$X1.3)] <- 0
View(databinary)
fitbinary <- train(X2.1 ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = databinary)
fitbinary
fitmean
fitreg
fitregper
fitnadrop
fitbinary
