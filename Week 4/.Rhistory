View(model)
#
library("kknn")
#set Directory to data path
setwd('/Users/dave/isye6501/Week 2')
#create table of credit card data - no headers
data<-read.table("credit_card_data.txt", header = FALSE)
#Check class and inspect data
class(data)
head(data)
summary(data)
#use train.kknn to find best k value. train.kknn uses leave one out
#cross validation, avoiding the issue mentioned in the HW instructions
train.kknn(formula=V11~.,data=data,kmax=100, kernel="rectangular", distance=2,scale=TRUE)
#generate train/test/val split
set.seed(10) # Set seed used in sampling so that we can reproduce sample
# sample 70% of data and assign to train set. Split remaining 30% 2/3 to validation
# and 1/3 to test set (so 20% of total to validation, 10% of total data set to test).
sample <- sample.int(n = nrow(data), size = floor(.7*nrow(data)), replace = FALSE)
sample2 <- sample.int(n = nrow(data[-sample,]), size = floor(.66*nrow(data[-sample,])), replace = FALSE)
train <- data[sample, ]
val <- data[sample2,]
test  <- data[-sample, ][-sample2,]
#create model - try a variety of hyperparameters using the validation set
model<-kknn(V11~.,train,val,k=39,distance=2,kernel="rectangular")
#get predictions and convert from continuous reponse to binary by rounding to 0 or 1
predictions<-round(fitted(model))
predictions
# generate confusion matrix - 0,0 means model predicts 0 and actual was 0
confusion <- table(val[,11], predictions)
confusion
# Compute accuracy on val
accu <- sum(diag(confusion))/nrow(val)
accu
#final test with best hyperparameters
model<-kknn(V11~.,train,test,k=22,distance=2,kernel="rectangular")
#get predictions and convert from continuous reponse to binary by rounding to 0 or 1
predictions<-round(fitted(model))
predictions
# generate confusion matrix - 0,0 means model predicts 0 and actual was 0
confusion <- table(test[,11], predictions)
confusion
# Compute accuracy on val
accu <- sum(diag(confusion))/nrow(test)
accu
#final test with best hyperparameters
model<-kknn(V11~.,train,test,k=2,distance=2,kernel="rectangular")
#get predictions and convert from continuous reponse to binary by rounding to 0 or 1
predictions<-round(fitted(model))
predictions
# generate confusion matrix - 0,0 means model predicts 0 and actual was 0
confusion <- table(test[,11], predictions)
confusion
# Compute accuracy on val
accu <- sum(diag(confusion))/nrow(test)
accu
#create model - try a variety of hyperparameters using the validation set
model<-kknn(V11~.,train,val,k=2,distance=2,kernel="rectangular")
#get predictions and convert from continuous reponse to binary by rounding to 0 or 1
predictions<-round(fitted(model))
predictions
# generate confusion matrix - 0,0 means model predicts 0 and actual was 0
confusion <- table(val[,11], predictions)
confusion
# Compute accuracy on val
accu <- sum(diag(confusion))/nrow(val)
accu
#final test with best hyperparameters
model<-kknn(V11~.,train,test,k=2,distance=2,kernel="rectangular")
#get predictions and convert from continuous reponse to binary by rounding to 0 or 1
predictions<-round(fitted(model))
predictions
# generate confusion matrix - 0,0 means model predicts 0 and actual was 0
confusion <- table(test[,11], predictions)
confusion
# Compute accuracy on val
accu <- sum(diag(confusion))/nrow(test)
accu
data()
data(iris)
data("iris")
data(iris)
head(iris)
summary(iris)
model <- kmeans(iris)
model <- kmeans(iris,3)
model <- kmeans(iris[1:4,],3)
model <- kmeans(iris,3)
View(iris)
model
fit.km <- kmeans(iris, 3, nstart=25)
type(iris)
fit.km <- kmeans(iris[1:4,], 3, nstart=25)
class(iris)
fit.km <- kmeans(iris[1:4,], centers=3, nstart=25)
fit.km <- kmeans(iris[,5], centers=3)
View(iris)
fit.km <- kmeans(iris[,1:4], centers=3)
clusters <- kmeans(iris[,1:4], centers=3)
#load data
data(iris)
head(iris)
summary(iris)
class(iris)
clusters <- kmeans(iris[,1:4], centers=3)
clusters
clusters <- kmeans(iris[,3:4], centers=3)
clusters
clusters <- kmeans(iris[,2:4], centers=3)
clusters
clusters <- kmeans(iris[,3:4], centers=3)
clusters
View(iris)
clusters
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#load ggplot for plotting results
library(ggplot2)
#load ggplot for plotting results
library(ggplot)
install.packages("ggplot2")
#load ggplot for plotting results
library(ggplot2)
install.packages(c("digest", "MASS", "mgcv", "RCurl", "rpart"))
install.packages("ggplot2")
install.packages("ggplot2")
plot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
install.packages("ggplot2")
getwd()
setwd(/Users/dave)
setwd(Users/dave)
setwd(~Users/dave)
setwd()
setwd(/dave)
setwd(dave/)
setwd(dave)
getwd
getwd()
cd ..
cd..
setwd('/Users/dave')
getwd()
install.packages("ggplot2")
install.packages("ggplot2")
#create table of clusters and species
table(clusters$cluster, iris$Species)
#ggplot2(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
plot(iris)
#ggplot2(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
plot(iris$Petal.Length, iris$Petal.Width)
#ggplot2(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
plot(iris$Petal.Length, iris$Petal.Width, color = Species)
#ggplot2(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
plot(iris$Petal.Length, iris$Petal.Width, Species)
#ggplot2(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
plot(iris$Petal.Length, iris$Petal.Width, iris$Species)
#ggplot2(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
plot(iris$Petal.Length, iris$Petal.Width, color = iris$Species)
install.packages("ggplot2")
#load ggplot for plotting results
library(ggplot2)
ggplot2(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#load ggplot for plotting results
library(ggplot2)
#load and inspect data
data(iris)
head(iris)
summary(iris)
class(iris)
#initialize model
clusters <- kmeans(iris[,3:4], centers=3)
clusters
#create table of clusters and species
table(clusters$cluster, iris$Species)
ggplot2(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
irisCluster$cluster <- as.factor(irisCluster$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$cluster)) + geom_point()
clusters$cluster <- as.factor(clusters$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$cluster)) + geom_point()
ggplot(iris, aes(Petal.Length, Petal.Width, color = clusters$cluster)) + geom_point()
#load ggplot for plotting results
library(ggplot2)
#load and inspect data
data(iris)
head(iris)
summary(iris)
class(iris)
#initialize model
clusters <- kmeans(iris[,3:4], centers=3)
clusters
#create table of clusters and species
table(clusters$cluster, iris$Species)
#plot petal length vs. width
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#clusters$cluster <- as.factor(clusters$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = clusters$cluster)) + geom_point()
clusters$cluster <- as.factor(clusters$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = clusters$cluster)) + geom_point()
Clusters <- as.factor(clusters$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point()
#load ggplot for plotting results
library(ggplot2)
#load and inspect data
data(iris)
head(iris)
summary(iris)
class(iris)
#initialize model
iris_clusters <- kmeans(iris[,3:4], centers=3)
iris_clusters
#create table of clusters and species
table(iris_clusters$cluster, iris$Species)
#plot petal length vs. width
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
Clusters <- as.factor(iris_clusters$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point()
table(Clusters, iris$Species)
#plot petal length vs. width, color points by species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#plot petal length vs. width, color points by species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point()
#plot petal length vs. width, color points by cluster
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point()
#plot petal length vs. width, color points by species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#plot petal length vs. width, color points by cluster
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point()
#initialize model
iris_clusters <- kmeans(iris[,1:4], centers=3)
iris_clusters
#initialize model
iris_clusters <- kmeans(iris[,3:4], centers=3)
iris_clusters
#create table of clusters and species
Clusters <- as.factor(iris_clusters$cluster)
table(Clusters, iris$Species)
#plot petal length vs. width, color points by species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#plot petal length vs. width, color points by cluster
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point()
source('~/isye6501/Week 2/4.2.R')
source('~/isye6501/Week 2/4.2.R')
#initialize model, test different ks and factors
iris_clusters <- kmeans(iris[,3:4], centers=3)
plot(iris)
#load ggplot for plotting results
library(ggplot2)
#load and inspect data
data(iris)
head(iris)
summary(iris)
class(iris)
#plot relationships between combo of predictors based on thise plot it looks
#like petal length and petal width are best predictors
plot(iris) -
#initialize model, test different ks and predictors
iris_clusters <- kmeans(iris[,3:4], centers=3)
iris_clusters
#create table of clusters and species
Clusters <- as.factor(iris_clusters$cluster)
table(Clusters, iris$Species)
ggplot(table(Clusters, iris$Species))
PLOT(table(Clusters, iris$Species))
PLOT(table(Clusters, iris$Species))
plot(table(Clusters, iris$Species))
df<-table(Clusters, iris$Species)
ggplot(as.data.frame(table(df)), aes(x=gender, y = Freq, fill=fraud)) + geom_bar(stat="identity")
ggplot(as.data.frame(table(df)), aes(x=gender, y = Freq, fill=fraud))
ggplot(as.data.frame(table(df)), aes(x=Clusters, y = iris$Species, fill=fraud))
ggplot(as.data.frame(table(df)), aes(x=Clusters, y = iris$Species))
ggplot(as.data.frame(table(df))
ggplot(as.data.frame(table(df)
ggplot(as.data.frame(table(df)))
df<-as.dataframe(table(Clusters, iris$Species))
ggplot(df)
df<-as.data.frame(table(Clusters, iris$Species))
ggplot(df)
ggplot(df, aes(x=Clusters))
ggplot(df, aes(x=Clusters) + geom_bar(y = iris$Species)
df<-as.data.frame(table(Clusters, iris$Species))
ggplot(df, aes(x=Clusters) + geom_bar(y = iris$Species)
df<-as.data.frame(table(Clusters, iris$Species))
#create table of clusters and species
Clusters <- as.factor(iris_clusters$cluster)
df<-as.data.frame(table(Clusters, iris$Species))
ggplot(df, aes(x=Clusters) + geom_bar(y = iris$Species)
ggplot(df, aes(x=Clusters) + geom_bar(y = iris$Species))
ggplot(df, aes(x=Clusters)) + geom_bar(y = iris$Species)
ggplot(df, aes(x=Clusters)) + geom_bar()
ggplot(df) + geom_bar()
ggplot(df, aes(Clusters, iris$Species)) + geom_bar()
ggplot(df, aes(x=Clusters, y=iris$Species)) + geom_bar()
df<-as.data.frame(table(Clusters, iris$Species))
df
table(Clusters, iris$Species))
table(Clusters, iris$Species)
#plot petal length vs. width, color points by cluster - very close to species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_encircle()
install.packages("ggalt")
#plot petal length vs. width, color points by cluster - very close to species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() geom_encircle(s_shape=0.5, expand=0.1, colour="purple")
#plot petal length vs. width, color points by cluster - very close to species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() + geom_encircle(s_shape=0.5, expand=0.1, colour="purple")
library(ggalt)
#plot petal length vs. width, color points by cluster - very close to species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() + geom_encircle(s_shape=0.5, expand=0.1, colour="purple")
#plot petal length vs. width, color points by cluster - very close to species
ss1<-(subset(iris, Species == setosa)
#plot petal length vs. width, color points by cluster - very close to species
ss1<-(subset(iris, Species == setosa))
#plot petal length vs. width, color points by cluster - very close to species
ss1<-(subset(iris, Species == setosa))
View(iris)
#plot petal length vs. width, color points by cluster - very close to species
ss1<-(subset(iris$Species == setosa ))
#plot petal length vs. width, color points by cluster - very close to species
ss1<-subset(iris$Species == setosa)
View(iris)
#plot petal length vs. width, color points by cluster - very close to species
ss1<-subset(iris, x == 1:50)
#plot petal length vs. width, color points by cluster - very close to species
ss1<-subset(iris, 1:50)
#plot petal length vs. width, color points by cluster - very close to species
ss1<-iris[1:50]
#plot petal length vs. width, color points by cluster - very close to species
ss1<-iris[1:50,]
ss3<-iris[101-150,]
ss3<-iris[101:150,]
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() + geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red")
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="green")
ss2<-iris[51:100,]
ss3<-iris[101:150,]
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="blue") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="green")
ss2<-Clusters[51:100,]
iris_clusters
#plot relationships between combo of predictors based on thise plot it looks
#like petal length and petal width are best predictors
plot(iris) -
#initialize model, test different ks and predictors
iris_cluster_model <- kmeans(iris[,3:4], centers=3)
iris_cluster_model
Clusters
table(Clusters, iris$Species)
ss2<-Clusters[51:100]
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="blue") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="green")
ss2<-iris_cluster_model$cluster[51:100]
#plot relationships between combo of predictors based on thise plot it looks
#like petal length and petal width are best predictors
plot(iris) -
#initialize model, test different ks and predictors
iris_cluster_model <- kmeans(iris[,3:4], centers=3)
iris_cluster_model
#create table of clusters and species
Clusters <- as.factor(iris_cluster_model$cluster)
Clusters
table(Clusters, iris$Species)
#plot petal length vs. width, color points by species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#plot petal length vs. width, color points by cluster - very close to species
ss1<-iris[1:50,]
ss2<-iris_cluster_model$cluster[51:100]
ss3<-iris[101:150,]
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="blue") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="green")
#load ggplot and ggalt for plotting results
library(ggplot2)
library(ggalt)
#load and inspect data
data(iris)
head(iris)
summary(iris)
class(iris)
#plot relationships between combo of predictors based on thise plot it looks
#like petal length and petal width are best predictors
plot(iris) -
#initialize model, test different ks and predictors
iris_cluster_model <- kmeans(iris[,3:4], centers=3)
iris_cluster_model
#plot relationships between combo of predictors based on thise plot it looks
#like petal length and petal width are best predictors
plot(iris)
#initialize model, test different ks and predictors
iris_cluster_model <- kmeans(iris[,3:4], centers=3)
iris_cluster_model
#create table of clusters and species
Clusters <- as.factor(iris_cluster_model$cluster)
Clusters
table(Clusters, iris$Species)
#plot petal length vs. width, color points by species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#plot petal length vs. width, color points by cluster - very close to species
ss1<-iris[1:50,]
ss2<-iris_cluster_model$cluster[51:100]
ss3<-iris[101:150,]
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="blue") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="green")
ss2<-subset(iris, iris_cluster_model$cluster = 2)
ss2<-subset(iris, iris_cluster_model$cluster == 2)
ss3<-subset(iris, iris_cluster_model$cluster == 3)
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="blue") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="green")
ss3<-subset(iris, iris_cluster_model$cluster == 2)
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="green") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="blue")
ss2<-subset(iris, iris_cluster_model$cluster == 2)
ss3<-subset(iris, iris_cluster_model$cluster == 3)
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="green") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.1, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.1, expand=0.1, colour="green") +
geom_encircle(data=ss3, s_shape=0.1, expand=0.1, colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.1, expand=0.5, colour="red") +
geom_encircle(data=ss2, s_shape=0.1, expand=0.5, colour="green") +
geom_encircle(data=ss3, s_shape=0.1, expand=0.5, colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.1, expand=0., colour="red") +
geom_encircle(data=ss2, s_shape=0.1, expand=0., colour="green") +
geom_encircle(data=ss3, s_shape=0.1, expand=0., colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0., colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0., colour="green") +
geom_encircle(data=ss3, s_shape=0.5, expand=0., colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.01, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.01, colour="green") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.01, colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.05, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.05, colour="green") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.05, colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.0, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.0, colour="green") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.0, colour="blue")
#load ggplot and ggalt for plotting results
library(ggplot2)
library(ggalt)
#load and inspect data
data(iris)
head(iris)
summary(iris)
class(iris)
#plot relationships between combo of predictors based on thise plot it looks
#like petal length and petal width are best predictors
plot(iris)
#initialize model, test different ks and predictors
iris_cluster_model <- kmeans(iris[,3:4], centers=3)
iris_cluster_model
#create table of clusters and species
Clusters <- as.factor(iris_cluster_model$cluster)
Clusters
table(Clusters, iris$Species)
#plot petal length vs. width, color points by species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#plot petal length vs. width, color points by cluster - very close to species
ss1<-subset(iris, iris_cluster_model$cluster == 1)
ss2<-subset(iris, iris_cluster_model$cluster == 2)
ss3<-subset(iris, iris_cluster_model$cluster == 3)
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.0, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.0, colour="green") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.0, colour="blue")
head(iris)
summary(iris)
library("qcc")
#set Directory to data path
setwd('/Users/dave/isye6501/Week 4')
#create table temp data with headers
data<-read.table("temps.txt", header = TRUE)
#Check class and inspect data, plot a few years
class(data)
head(data)
summary(data)
plot.ts(data[,2:5])
#convert each year in data to timeseries object
data<-as.vector(unlist(data[,2:21]))
ts <- ts(data, start = 1996, frequency=123)
ts
ts
#run HoltWinters on the timeseries, using Alpha, Beta, and Gamma, multiplicative seasonality to try to capture non-linearity in data
hw<-HoltWinters(ts, seasonal = c("multiplicative"))
hw
#Plot the smoothed data
plot(hw)
#plot the fitted factors for the model
plot(hw$fitted)
#store the value of the seasonality adjustment in a single vector.
seasonality<-hw$fitted[,4]
#plot seasonality adjustment -increases in later years.
plot(seasonality)
hw
