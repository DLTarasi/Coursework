# generate confusion matrix - 0,0 means model predicts 0 and actual was 0
confusion <- table(test[,11], predictions)
confusion
# Compute accuracy on val
accu <- sum(diag(confusion))/nrow(test)
accu
data()
data(iris)
data("iris")
data(iris)
head(iris)
summary(iris)
model <- kmeans(iris)
model <- kmeans(iris,3)
model <- kmeans(iris[1:4,],3)
model <- kmeans(iris,3)
View(iris)
model
fit.km <- kmeans(iris, 3, nstart=25)
type(iris)
fit.km <- kmeans(iris[1:4,], 3, nstart=25)
class(iris)
fit.km <- kmeans(iris[1:4,], centers=3, nstart=25)
fit.km <- kmeans(iris[,5], centers=3)
View(iris)
fit.km <- kmeans(iris[,1:4], centers=3)
clusters <- kmeans(iris[,1:4], centers=3)
#load data
data(iris)
head(iris)
summary(iris)
class(iris)
clusters <- kmeans(iris[,1:4], centers=3)
clusters
clusters <- kmeans(iris[,3:4], centers=3)
clusters
clusters <- kmeans(iris[,2:4], centers=3)
clusters
clusters <- kmeans(iris[,3:4], centers=3)
clusters
View(iris)
clusters
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#load ggplot for plotting results
library(ggplot2)
#load ggplot for plotting results
library(ggplot)
install.packages("ggplot2")
#load ggplot for plotting results
library(ggplot2)
install.packages(c("digest", "MASS", "mgcv", "RCurl", "rpart"))
install.packages("ggplot2")
install.packages("ggplot2")
plot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
install.packages("ggplot2")
getwd()
setwd(/Users/dave)
setwd(Users/dave)
setwd(~Users/dave)
setwd()
setwd(/dave)
setwd(dave/)
setwd(dave)
getwd
getwd()
cd ..
cd..
setwd('/Users/dave')
getwd()
install.packages("ggplot2")
install.packages("ggplot2")
#create table of clusters and species
table(clusters$cluster, iris$Species)
#ggplot2(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
plot(iris)
#ggplot2(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
plot(iris$Petal.Length, iris$Petal.Width)
#ggplot2(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
plot(iris$Petal.Length, iris$Petal.Width, color = Species)
#ggplot2(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
plot(iris$Petal.Length, iris$Petal.Width, Species)
#ggplot2(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
plot(iris$Petal.Length, iris$Petal.Width, iris$Species)
#ggplot2(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
plot(iris$Petal.Length, iris$Petal.Width, color = iris$Species)
install.packages("ggplot2")
#load ggplot for plotting results
library(ggplot2)
ggplot2(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#load ggplot for plotting results
library(ggplot2)
#load and inspect data
data(iris)
head(iris)
summary(iris)
class(iris)
#initialize model
clusters <- kmeans(iris[,3:4], centers=3)
clusters
#create table of clusters and species
table(clusters$cluster, iris$Species)
ggplot2(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
irisCluster$cluster <- as.factor(irisCluster$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$cluster)) + geom_point()
clusters$cluster <- as.factor(clusters$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$cluster)) + geom_point()
ggplot(iris, aes(Petal.Length, Petal.Width, color = clusters$cluster)) + geom_point()
#load ggplot for plotting results
library(ggplot2)
#load and inspect data
data(iris)
head(iris)
summary(iris)
class(iris)
#initialize model
clusters <- kmeans(iris[,3:4], centers=3)
clusters
#create table of clusters and species
table(clusters$cluster, iris$Species)
#plot petal length vs. width
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#clusters$cluster <- as.factor(clusters$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = clusters$cluster)) + geom_point()
clusters$cluster <- as.factor(clusters$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = clusters$cluster)) + geom_point()
Clusters <- as.factor(clusters$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point()
#load ggplot for plotting results
library(ggplot2)
#load and inspect data
data(iris)
head(iris)
summary(iris)
class(iris)
#initialize model
iris_clusters <- kmeans(iris[,3:4], centers=3)
iris_clusters
#create table of clusters and species
table(iris_clusters$cluster, iris$Species)
#plot petal length vs. width
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
Clusters <- as.factor(iris_clusters$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point()
table(Clusters, iris$Species)
#plot petal length vs. width, color points by species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#plot petal length vs. width, color points by species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point()
#plot petal length vs. width, color points by cluster
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point()
#plot petal length vs. width, color points by species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#plot petal length vs. width, color points by cluster
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point()
#initialize model
iris_clusters <- kmeans(iris[,1:4], centers=3)
iris_clusters
#initialize model
iris_clusters <- kmeans(iris[,3:4], centers=3)
iris_clusters
#create table of clusters and species
Clusters <- as.factor(iris_clusters$cluster)
table(Clusters, iris$Species)
#plot petal length vs. width, color points by species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#plot petal length vs. width, color points by cluster
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point()
source('~/isye6501/Week 2/4.2.R')
source('~/isye6501/Week 2/4.2.R')
#initialize model, test different ks and factors
iris_clusters <- kmeans(iris[,3:4], centers=3)
plot(iris)
#load ggplot for plotting results
library(ggplot2)
#load and inspect data
data(iris)
head(iris)
summary(iris)
class(iris)
#plot relationships between combo of predictors based on thise plot it looks
#like petal length and petal width are best predictors
plot(iris) -
#initialize model, test different ks and predictors
iris_clusters <- kmeans(iris[,3:4], centers=3)
iris_clusters
#create table of clusters and species
Clusters <- as.factor(iris_clusters$cluster)
table(Clusters, iris$Species)
ggplot(table(Clusters, iris$Species))
PLOT(table(Clusters, iris$Species))
PLOT(table(Clusters, iris$Species))
plot(table(Clusters, iris$Species))
df<-table(Clusters, iris$Species)
ggplot(as.data.frame(table(df)), aes(x=gender, y = Freq, fill=fraud)) + geom_bar(stat="identity")
ggplot(as.data.frame(table(df)), aes(x=gender, y = Freq, fill=fraud))
ggplot(as.data.frame(table(df)), aes(x=Clusters, y = iris$Species, fill=fraud))
ggplot(as.data.frame(table(df)), aes(x=Clusters, y = iris$Species))
ggplot(as.data.frame(table(df))
ggplot(as.data.frame(table(df)
ggplot(as.data.frame(table(df)))
df<-as.dataframe(table(Clusters, iris$Species))
ggplot(df)
df<-as.data.frame(table(Clusters, iris$Species))
ggplot(df)
ggplot(df, aes(x=Clusters))
ggplot(df, aes(x=Clusters) + geom_bar(y = iris$Species)
df<-as.data.frame(table(Clusters, iris$Species))
ggplot(df, aes(x=Clusters) + geom_bar(y = iris$Species)
df<-as.data.frame(table(Clusters, iris$Species))
#create table of clusters and species
Clusters <- as.factor(iris_clusters$cluster)
df<-as.data.frame(table(Clusters, iris$Species))
ggplot(df, aes(x=Clusters) + geom_bar(y = iris$Species)
ggplot(df, aes(x=Clusters) + geom_bar(y = iris$Species))
ggplot(df, aes(x=Clusters)) + geom_bar(y = iris$Species)
ggplot(df, aes(x=Clusters)) + geom_bar()
ggplot(df) + geom_bar()
ggplot(df, aes(Clusters, iris$Species)) + geom_bar()
ggplot(df, aes(x=Clusters, y=iris$Species)) + geom_bar()
df<-as.data.frame(table(Clusters, iris$Species))
df
table(Clusters, iris$Species))
table(Clusters, iris$Species)
#plot petal length vs. width, color points by cluster - very close to species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_encircle()
install.packages("ggalt")
#plot petal length vs. width, color points by cluster - very close to species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() geom_encircle(s_shape=0.5, expand=0.1, colour="purple")
#plot petal length vs. width, color points by cluster - very close to species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() + geom_encircle(s_shape=0.5, expand=0.1, colour="purple")
library(ggalt)
#plot petal length vs. width, color points by cluster - very close to species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() + geom_encircle(s_shape=0.5, expand=0.1, colour="purple")
#plot petal length vs. width, color points by cluster - very close to species
ss1<-(subset(iris, Species == setosa)
#plot petal length vs. width, color points by cluster - very close to species
ss1<-(subset(iris, Species == setosa))
#plot petal length vs. width, color points by cluster - very close to species
ss1<-(subset(iris, Species == setosa))
View(iris)
#plot petal length vs. width, color points by cluster - very close to species
ss1<-(subset(iris$Species == setosa ))
#plot petal length vs. width, color points by cluster - very close to species
ss1<-subset(iris$Species == setosa)
View(iris)
#plot petal length vs. width, color points by cluster - very close to species
ss1<-subset(iris, x == 1:50)
#plot petal length vs. width, color points by cluster - very close to species
ss1<-subset(iris, 1:50)
#plot petal length vs. width, color points by cluster - very close to species
ss1<-iris[1:50]
#plot petal length vs. width, color points by cluster - very close to species
ss1<-iris[1:50,]
ss3<-iris[101-150,]
ss3<-iris[101:150,]
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() + geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red")
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="green")
ss2<-iris[51:100,]
ss3<-iris[101:150,]
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="blue") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="green")
ss2<-Clusters[51:100,]
iris_clusters
#plot relationships between combo of predictors based on thise plot it looks
#like petal length and petal width are best predictors
plot(iris) -
#initialize model, test different ks and predictors
iris_cluster_model <- kmeans(iris[,3:4], centers=3)
iris_cluster_model
Clusters
table(Clusters, iris$Species)
ss2<-Clusters[51:100]
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="blue") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="green")
ss2<-iris_cluster_model$cluster[51:100]
#plot relationships between combo of predictors based on thise plot it looks
#like petal length and petal width are best predictors
plot(iris) -
#initialize model, test different ks and predictors
iris_cluster_model <- kmeans(iris[,3:4], centers=3)
iris_cluster_model
#create table of clusters and species
Clusters <- as.factor(iris_cluster_model$cluster)
Clusters
table(Clusters, iris$Species)
#plot petal length vs. width, color points by species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#plot petal length vs. width, color points by cluster - very close to species
ss1<-iris[1:50,]
ss2<-iris_cluster_model$cluster[51:100]
ss3<-iris[101:150,]
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="blue") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="green")
#load ggplot and ggalt for plotting results
library(ggplot2)
library(ggalt)
#load and inspect data
data(iris)
head(iris)
summary(iris)
class(iris)
#plot relationships between combo of predictors based on thise plot it looks
#like petal length and petal width are best predictors
plot(iris) -
#initialize model, test different ks and predictors
iris_cluster_model <- kmeans(iris[,3:4], centers=3)
iris_cluster_model
#plot relationships between combo of predictors based on thise plot it looks
#like petal length and petal width are best predictors
plot(iris)
#initialize model, test different ks and predictors
iris_cluster_model <- kmeans(iris[,3:4], centers=3)
iris_cluster_model
#create table of clusters and species
Clusters <- as.factor(iris_cluster_model$cluster)
Clusters
table(Clusters, iris$Species)
#plot petal length vs. width, color points by species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#plot petal length vs. width, color points by cluster - very close to species
ss1<-iris[1:50,]
ss2<-iris_cluster_model$cluster[51:100]
ss3<-iris[101:150,]
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="blue") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="green")
ss2<-subset(iris, iris_cluster_model$cluster = 2)
ss2<-subset(iris, iris_cluster_model$cluster == 2)
ss3<-subset(iris, iris_cluster_model$cluster == 3)
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="blue") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="green")
ss3<-subset(iris, iris_cluster_model$cluster == 2)
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="green") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="blue")
ss2<-subset(iris, iris_cluster_model$cluster == 2)
ss3<-subset(iris, iris_cluster_model$cluster == 3)
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.1, colour="green") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.1, colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.1, expand=0.1, colour="red") +
geom_encircle(data=ss2, s_shape=0.1, expand=0.1, colour="green") +
geom_encircle(data=ss3, s_shape=0.1, expand=0.1, colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.1, expand=0.5, colour="red") +
geom_encircle(data=ss2, s_shape=0.1, expand=0.5, colour="green") +
geom_encircle(data=ss3, s_shape=0.1, expand=0.5, colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.1, expand=0., colour="red") +
geom_encircle(data=ss2, s_shape=0.1, expand=0., colour="green") +
geom_encircle(data=ss3, s_shape=0.1, expand=0., colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0., colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0., colour="green") +
geom_encircle(data=ss3, s_shape=0.5, expand=0., colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.01, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.01, colour="green") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.01, colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.05, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.05, colour="green") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.05, colour="blue")
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.0, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.0, colour="green") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.0, colour="blue")
#load ggplot and ggalt for plotting results
library(ggplot2)
library(ggalt)
#load and inspect data
data(iris)
head(iris)
summary(iris)
class(iris)
#plot relationships between combo of predictors based on thise plot it looks
#like petal length and petal width are best predictors
plot(iris)
#initialize model, test different ks and predictors
iris_cluster_model <- kmeans(iris[,3:4], centers=3)
iris_cluster_model
#create table of clusters and species
Clusters <- as.factor(iris_cluster_model$cluster)
Clusters
table(Clusters, iris$Species)
#plot petal length vs. width, color points by species
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
#plot petal length vs. width, color points by cluster - very close to species
ss1<-subset(iris, iris_cluster_model$cluster == 1)
ss2<-subset(iris, iris_cluster_model$cluster == 2)
ss3<-subset(iris, iris_cluster_model$cluster == 3)
ggplot(iris, aes(Petal.Length, Petal.Width, color = Clusters)) + geom_point() +
geom_encircle(data=ss1, s_shape=0.5, expand=0.0, colour="red") +
geom_encircle(data=ss2, s_shape=0.5, expand=0.0, colour="green") +
geom_encircle(data=ss3, s_shape=0.5, expand=0.0, colour="blue")
head(iris)
summary(iris)
#packages
library(pls)
library(ggplot2)
library(reshape2)
library(ggfortify)
#set Directory to data path
setwd('/Users/dave/isye6501/Week 6')
#create table of crime data with headers
uscrimedata<-read.table("uscrime.txt", header = TRUE)
#Check class and inspect data
class(uscrimedata)
head(uscrimedata)
summary(uscrimedata)
#####Plotting and Data Cleaning
#####Outlier Testing - did not remove potential outliers based on week three analysis
#plot all variables
uscrime_melt = melt(data=uscrimedata, measure.vars = colnames(uscrimedata[,1:15]))
ggplot(data = uscrime_melt, aes(x=value, y=Crime)) +
geom_point() +
facet_wrap(~variable, scales = "free")
#Remove So because it is categorical - PCA works best on continuos numerical data
uscrimedata <- uscrimedata[,-2]
########Build Model
#Find all principal components of dataset, using leave one out cv and scaling data
pcamodel <- pcr(Crime ~., data = uscrimedata, scale = TRUE, validation = "LOO")
summary(pcamodel)
plot(pcamodel)
plot(pcamodel$loadings)
variancepercomp<-pcamodel$Xvar/sum(pcamodel$Xvar)
#plot variance explained by each PC
plot(variancepercomp,
xlab = "Principal Component",
ylab = "Percent of Variance Explained")
#Plot Cumulative variance explained for certain number of PCs
plot(cumsum(variancepercomp),
xlab = "Principal Component",
ylab = "Percent of Variance Explained")
# calculate root mean squared error and r2 of prediction - 5 pcs looks best
plot(RMSEP(pcamodel))
plot(R2(pcamodel))
corrplot(pcamodel, 1:5)
loadingplot(pcamodel, 1:5, legendpos = "bottomleft")
pcamodel5 <- pcr(Crime ~., data = uscrimedata, scale = TRUE, validation = "LOO", ncomp = 5)
########Predict
#create test city data frame - do not use So as it was not used when creating principal components
test_city <- c(M = 14.0,
Ed = 10.0, Po1 = 12.0,
Po2 = 15.5,LF = 0.640,
M.F = 94.0, Pop = 150,
NW = 1.1, U1 = 0.120,
U2 = 3.6, Wealth = 3200,
Ineq = 20.1, Prob = 0.04,
Time = 39.0)
test_city <- as.data.frame(t(test_city))
#predict crime level in test city using the crime model with 5 principal components - Result: 1443
new_crime = predict(object=pcamodel5, newdata = test_city, ncomp = 5)
#convert PCs back to original coefficients, then unscale
pca5<-t(as.data.frame(coef(pcamodel5, intercept = TRUE)))
pca5coef<-pca5[2:15]/pcamodel5$scale
pca5
#get intercept from pcamodel5
intercept <- pca5[1]
#manually caclculate Crime rate for test city using intercept, unscaled coefficients and test city - confirm matches 1443
intercept + sum(pca5coef * test_city)
#predict crime level in test city using the crime model with 5 principal components - Result: 1443
new_crime = predict(object=pcamodel5, newdata = test_city, ncomp = 6)
#predict crime level in test city using the crime model with 5 principal components - Result: 1443
new_crime = predict(object=pcamodel, newdata = test_city, ncomp = 6)
#predict crime level in test city using the crime model with 5 principal components - Result: 1443
new_crime = predict(object=pcamodel, newdata = test_city, ncomp = 5)
#predict crime level in test city using the crime model with 5 principal components - Result: 1443
new_crime = predict(object=pcamodel5, newdata = test_city, ncomp = 5)
#predict crime level in test city using the crime model with 5 principal components - Result: 1443
new_crime = predict(object=pcamodel6, newdata = test_city, ncomp = 6)
pcamodel6 <- pcr(Crime ~., data = uscrimedata, scale = TRUE, validation = "LOO", ncomp = 6)
#predict crime level in test city using the crime model with 5 principal components - Result: 1443
new_crime = predict(object=pcamodel6, newdata = test_city, ncomp = 6)
#convert PCs back to original coefficients, then unscale
pca6<-t(as.data.frame(coef(pcamodel6, intercept = TRUE)))
pca6coef<-pca5[2:15]/pcamodel6$scale
pca6
#get intercept from pcamodel5
intercept <- pca6[1]
#manually caclculate Crime rate for test city using intercept, unscaled coefficients and test city - confirm matches 1443
intercept + sum(pca6coef * test_city)
pca6coef<-pca6[2:15]/pcamodel6$scale
pca6
#get intercept from pcamodel5
intercept <- pca6[1]
#manually caclculate Crime rate for test city using intercept, unscaled coefficients and test city - confirm matches 1443
intercept + sum(pca6coef * test_city)
#plot variance explained by each PC
plot(variancepercomp,
xlab = "Principal Component",
ylab = "Percent of Variance Explained")
#Plot Cumulative variance explained for certain number of PCs
plot(cumsum(variancepercomp),
xlab = "Principal Component",
ylab = "Cumulative Amount Variance Explained")
