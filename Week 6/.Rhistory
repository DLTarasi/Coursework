pcacoef5<-t(as.data.frame(coef(pcamodel5)))
pcacoef5
pcacoef5<-pcacoef5/sapply(uscrimedata[,1:15],sd)
pcacoef5<-pcacoef5/sapply(uscrimedata[,1:14],sd)
sum(pcacoef5 * test_city)-5300
pcacoef5
sum(pcacoef5 * test_city)
sum(pcacoef5 * test_city)-5300
########Build Model
#Find all principal components of dataset, using leave one out cv and scaling data
pcamodel <- pcr(Crime ~., data = uscrimedata, validation = "LOO")
summary(pcamodel)
plot(pcamodel)
plot(pcamodel$loadings)
variancepercomp<-pcamodel$Xvar/sum(pcamodel$Xvar)
#plot variance explained by each PC
plot(variancepercomp,
xlab = "Principal Component",
ylab = "Percent of Variance Explained")
#Plot Cumulative variance explained for certain number of PCs
plot(cumsum(variancepercomp),
xlab = "Principal Component",
ylab = "Percent of Variance Explained")
# calculate root mean squared error and r2 of prediction
plot(RMSEP(pcamodel))
plot(R2(pcamodel))
#Create model with top 5 components
pcamodel5 <- pcr(Crime ~., data = uscrimedata, scale = TRUE, ncomp = 5, validation = "LOO")
summary(pcamodel5)
# calculate mean squared error and r2 of model
RMSEP(pcamodel5)
R2(pcamodel5)
########Predict
#create test city data frame - do not use So as it was not used when creating principal components
test_city <- c(M = 14.0,
Ed = 10.0, Po1 = 12.0,
Po2 = 15.5,LF = 0.640,
M.F = 94.0, Pop = 150,
NW = 1.1, U1 = 0.120,
U2 = 3.6, Wealth = 3200,
Ineq = 20.1, Prob = 0.04,
Time = 39.0)
#Create model with top 5 components
pcamodel5 <- pcr(Crime ~., data = uscrimedata, ncomp = 5, validation = "LOO")
summary(pcamodel5)
# calculate mean squared error and r2 of model
RMSEP(pcamodel5)
R2(pcamodel5)
########Predict
#create test city data frame - do not use So as it was not used when creating principal components
test_city <- c(M = 14.0,
Ed = 10.0, Po1 = 12.0,
Po2 = 15.5,LF = 0.640,
M.F = 94.0, Pop = 150,
NW = 1.1, U1 = 0.120,
U2 = 3.6, Wealth = 3200,
Ineq = 20.1, Prob = 0.04,
Time = 39.0)
test_city <- as.data.frame(t(test_city))
#predict crime level in test city using the crime model with 5 principal components -
new_crime = predict(object=pcamodel5, newdata = test_city, ncomp = 5)
#convert PCs back to original coefficients - these are still scaled so need to unscale
pcacoef5<-t(as.data.frame(coef(pcamodel5)))
pcacoef5
pcacoef5<-pcacoef5/sapply(uscrimedata[,1:14],sd)
pcacoef5
sum(pcacoef5 * test_city)-5300
#convert PCs back to original coefficients - these are still scaled so need to unscale
pcacoef5<-t(as.data.frame(coef(pcamodel5)))
pcacoef5
sum(pcacoef5 * test_city)-5300
sum(pcacoef5 * test_city)
pcacoef5<-pcacoef5/sapply(uscrimedata[,1:14],sd)
pcacoef5
sum(pcacoef5 * test_city)
scale = TRUE
scale = TRUE
scale = TRUE
########Build Model
#Find all principal components of dataset, using leave one out cv and scaling data
pcamodel <- pcr(Crime ~., data = uscrimedata, scale = TRUE, validation = "LOO")
summary(pcamodel)
plot(pcamodel)
plot(pcamodel$loadings)
variancepercomp<-pcamodel$Xvar/sum(pcamodel$Xvar)
#plot variance explained by each PC
plot(variancepercomp,
xlab = "Principal Component",
ylab = "Percent of Variance Explained")
#Plot Cumulative variance explained for certain number of PCs
plot(cumsum(variancepercomp),
xlab = "Principal Component",
ylab = "Percent of Variance Explained")
# calculate root mean squared error and r2 of prediction
plot(RMSEP(pcamodel))
plot(R2(pcamodel))
#Create model with top 5 components
pcamodel5 <- pcr(Crime ~., data = uscrimedata, scale = TRUE, ncomp = 5, validation = "LOO")
summary(pcamodel5)
# calculate mean squared error and r2 of model
RMSEP(pcamodel5)
R2(pcamodel5)
########Predict
#create test city data frame - do not use So as it was not used when creating principal components
test_city <- c(M = 14.0,
Ed = 10.0, Po1 = 12.0,
Po2 = 15.5,LF = 0.640,
M.F = 94.0, Pop = 150,
NW = 1.1, U1 = 0.120,
U2 = 3.6, Wealth = 3200,
Ineq = 20.1, Prob = 0.04,
Time = 39.0)
test_city <- as.data.frame(t(test_city))
#predict crime level in test city using the crime model with 5 principal components -
new_crime = predict(object=pcamodel5, newdata = test_city, ncomp = 5)
#convert PCs back to original coefficients - these are still scaled so need to unscale
pcacoef5<-t(as.data.frame(coef(pcamodel5)))
pcacoef5
pcacoef5<-pcacoef5/sapply(uscrimedata[,1:14],sd)
pcacoef5
sum(pcacoef5 * test_city)-5300
sum(pcacoef5 * test_city)-5800
View(pcamodel5)
sum(pcacoef5 * test_city)-905
pcacoef5 * test_city
pcacoef5
intercept + sum(pcacoef5 * test_city)
View(pcamodel5)
pcamodel5[["fitted.values"]]
intercept <- 0
intercept + sum(pcacoef5 * test_city)
intercept <- -(1443 - 7169_
intercept <- -(1443 - 7169)
intercept + sum(pcacoef5 * test_city)
intercept <- -(1443 - 7169)
intercept <- 1443 - 7169
intercept + sum(pcacoef5 * test_city)
#convert PCs back to original coefficients - these are still scaled so need to unscale
pcacoef5<-t(as.data.frame(coef(pcamodel5)))
pcacoef5
intercept + sum(pcacoef5 * test_city)
pcacoef5<-pcacoef5/sapply(uscrimedata[,1:14],sd)
pcacoef5
intercept <- 1443 - 7169
intercept + sum(pcacoef5 * test_city)
#packages
library(ggplot2)
library(outliers)
library(reshape2)
#set Directory to data path
setwd('/Users/dave/isye6501/Week 5')
#create table of crime data with headers
uscrimedata<-read.table("uscrime.txt", header = TRUE)
#Check class and inspect data
class(uscrimedata)
head(uscrimedata)
summary(uscrimedata)
######Outlier Testing - ultimately decided not to remove and didn't use this code.
#single sided grubs tests
grubbs.test(uscrimedata$Crime, type = 10)
######Outlier Testing - ultimately decided not to remove and didn't use this code.
#single sided grubs tests
grubbs.test(uscrimedata$Crime, type = 10)
#####Plotting
#plot all variables
uscrime_melt = melt(data=uscrimedata, measure.vars = colnames(uscrimedata[,1:15]))
ggplot(data = uscrime_melt, aes(x=value, y=Crime)) +
geom_point() +
facet_wrap(~variable, scales = "free")
########Build Model
#Create model with all variables
basecrimemodel <- lm(Crime ~., uscrimedata)
summary(basecrimemodel)
AIC(basecrimemodel)
#create model with only variables with p value below .1 - chose this one
crimemodelp.1 <- lm(Crime ~ M + Ed + Po1 + U2 + Ineq + Prob, uscrimedata)
summary(crimemodelp.1)
########Build Model
#Create model with all variables
basecrimemodel <- lm(Crime ~ So, uscrimedata)
summary(basecrimemodel)
########Build Model
#Create model with all variables
basecrimemodel <- lm(Crime ~ -So, uscrimedata)
summary(basecrimemodel)
########Build Model
#Create model with all variables
basecrimemodel <- lm(Crime ~., uscrimedata)
summary(basecrimemodel)
########Build Model
#Create model with all variables
basecrimemodel <- lm(Crime ~., uscrimedata[,-2])
summary(basecrimemodel)
########Build Model
#Create model with all variables
basecrimemodel <- lm(Crime ~., uscrimedata)
summary(basecrimemodel)
########Build Model
#Create model with all variables
basecrimemodel <- lm(Crime ~., uscrimedata[,-2])
summary(basecrimemodel)
intercept <- 1443 - 7169
intercept + sum(pcacoef5 * test_city)
#packages
library(pls)
library(ggplot2)
library(reshape2)
library(ggfortify)
#set Directory to data path
setwd('/Users/dave/isye6501/Week 6')
#create table of crime data with headers
uscrimedata<-read.table("uscrime.txt", header = TRUE)
#Check class and inspect data
class(uscrimedata)
head(uscrimedata)
summary(uscrimedata)
#####Plotting and Data Cleaning
#####Outlier Testing - did not remove potential outliers based on week three analysis
#plot all variables
uscrime_melt = melt(data=uscrimedata, measure.vars = colnames(uscrimedata[,1:15]))
ggplot(data = uscrime_melt, aes(x=value, y=Crime)) +
geom_point() +
facet_wrap(~variable, scales = "free")
#Remove So because it is categorical - PCA works best on continuos numerical data
uscrimedata <- uscrimedata[,-2]
########Build Model
#Find all principal components of dataset, using leave one out cv and scaling data
pcamodel <- pcr(Crime ~., data = uscrimedata, scale = TRUE, validation = "LOO")
summary(pcamodel)
plot(pcamodel)
plot(pcamodel$loadings)
variancepercomp<-pcamodel$Xvar/sum(pcamodel$Xvar)
#plot variance explained by each PC
plot(variancepercomp,
xlab = "Principal Component",
ylab = "Percent of Variance Explained")
#Plot Cumulative variance explained for certain number of PCs
plot(cumsum(variancepercomp),
xlab = "Principal Component",
ylab = "Percent of Variance Explained")
# calculate root mean squared error and r2 of prediction
plot(RMSEP(pcamodel))
plot(R2(pcamodel))
#Create model with top 5 components
pcamodel5 <- pcr(Crime ~., data = uscrimedata, scale = TRUE, ncomp = 5, validation = "LOO")
summary(pcamodel5)
# calculate mean squared error and r2 of model
RMSEP(pcamodel5)
R2(pcamodel5)
########Predict
#create test city data frame - do not use So as it was not used when creating principal components
test_city <- c(M = 14.0,
Ed = 10.0, Po1 = 12.0,
Po2 = 15.5,LF = 0.640,
M.F = 94.0, Pop = 150,
NW = 1.1, U1 = 0.120,
U2 = 3.6, Wealth = 3200,
Ineq = 20.1, Prob = 0.04,
Time = 39.0)
test_city <- as.data.frame(t(test_city))
#predict crime level in test city using the crime model with 5 principal components -
new_crime = predict(object=pcamodel5, newdata = test_city, ncomp = 5)
#convert PCs back to original coefficients - these are still scaled so need to unscale
pcacoef5<-t(as.data.frame(coef(pcamodel5)))
pcacoef5
pcacoef5<-pcacoef5/sapply(uscrimedata[,1:14],sd)
pcacoef5
intercept <- 1443 - 7169
intercept + sum(pcacoef5 * test_city)
View(test_city)
View(test_city)
View(pcamodel5)
pcacoef5<-pcacoef5/pcamodel5$scale
pcacoef5
pcacoef5
pcacoef5
intercept <- 1443 - 7169
intercept + sum(pcacoef5 * test_city)
#convert PCs back to original coefficients - these are still scaled so need to unscale
pcacoef5<-t(as.data.frame(coef(pcamodel5)))
pcacoef5
pcacoef5<-pcacoef5/pcamodel5$scale
pcacoef5
intercept <- 1443 - 7169
intercept + sum(pcacoef5 * test_city)
#convert PCs back to original coefficients
pcacoef5<-t(as.data.frame(coef(pcamodel5)))
test_city <- test_city*pcamodel5$scale
View(test_city)
intercept + sum(pcacoef5 * test_city)
test_city <- test_city/pcamodel5$scale
########Predict
#create test city data frame - do not use So as it was not used when creating principal components
test_city <- c(M = 14.0,
Ed = 10.0, Po1 = 12.0,
Po2 = 15.5,LF = 0.640,
M.F = 94.0, Pop = 150,
NW = 1.1, U1 = 0.120,
U2 = 3.6, Wealth = 3200,
Ineq = 20.1, Prob = 0.04,
Time = 39.0)
test_city <- as.data.frame(t(test_city))
test_city <- test_city/pcamodel5$scale
View(test_city)
#predict crime level in test city using the crime model with 5 principal components -
new_crime = predict(object=pcamodel5, newdata = test_city, ncomp = 5)
#convert PCs back to original coefficients
pcacoef5<-t(as.data.frame(coef(pcamodel5)))
pcacoef5
intercept <- 1443 - 7169
intercept + sum(pcacoef5 * test_city)
########Predict
#create test city data frame - do not use So as it was not used when creating principal components
test_city <- c(M = 14.0,
Ed = 10.0, Po1 = 12.0,
Po2 = 15.5,LF = 0.640,
M.F = 94.0, Pop = 150,
NW = 1.1, U1 = 0.120,
U2 = 3.6, Wealth = 3200,
Ineq = 20.1, Prob = 0.04,
Time = 39.0)
test_city <- as.data.frame(t(test_city))
#predict crime level in test city using the crime model with 5 principal components -
new_crime = predict(object=pcamodel5, newdata = test_city, ncomp = 5)
#convert PCs back to original coefficients
pcacoef5<-t(as.data.frame(coef(pcamodel5)))
#convert PCs back to original coefficients, then unscale
pcacoef5<-t(as.data.frame(coef(pcamodel5)))
pcacoef5<-pcacoef5/pcamodel5$scale
pcacoef5
intercept <- 1443 - 7169
intercept + sum(pcacoef5 * test_city)
#predict crime level in test city using the crime model with 5 principal components -
new_crime = predict(object=pcamodel, newdata = test_city, ncomp = 5)
plot(R2(pcamodel))
#plot variance explained by each PC
plot(variancepercomp,
xlab = "Principal Component",
ylab = "Percent of Variance Explained")
#Plot Cumulative variance explained for certain number of PCs
plot(cumsum(variancepercomp),
xlab = "Principal Component",
ylab = "Percent of Variance Explained")
# calculate root mean squared error and r2 of prediction - 5 pcs looks best
plot(RMSEP(pcamodel))
plot(R2(pcamodel))
########Predict
#create test city data frame - do not use So as it was not used when creating principal components
test_city <- c(M = 14.0,
Ed = 10.0, Po1 = 12.0,
Po2 = 15.5,LF = 0.640,
M.F = 94.0, Pop = 150,
NW = 1.1, U1 = 0.120,
U2 = 3.6, Wealth = 3200,
Ineq = 20.1, Prob = 0.04,
Time = 39.0)
test_city <- as.data.frame(t(test_city))
#predict crime level in test city using the crime model with 5 principal components -
new_crime = predict(object=pcamodel, newdata = test_city, ncomp = 5)
#convert PCs back to original coefficients, then unscale
pcacoef5<-t(as.data.frame(coef(pcamodel5)))
pcacoef5<-pcacoef5/pcamodel5$scale
pcacoef5
#convert PCs back to original coefficients, then unscale
pcacoef5<-t(as.data.frame(coef(pcamodel)))
pcacoef5<-pcacoef5/pcamodel5$scale
pcacoef5
intercept <- 1443 - 7169
intercept + sum(pcacoef5 * test_city)
pcamodel5 <- pcr(Crime ~., data = uscrimedata, scale = TRUE, validation = "LOO", ncomps = 5)
View(pcamodel5)
########Predict
#create test city data frame - do not use So as it was not used when creating principal components
test_city <- c(M = 14.0,
Ed = 10.0, Po1 = 12.0,
Po2 = 15.5,LF = 0.640,
M.F = 94.0, Pop = 150,
NW = 1.1, U1 = 0.120,
U2 = 3.6, Wealth = 3200,
Ineq = 20.1, Prob = 0.04,
Time = 39.0)
test_city <- as.data.frame(t(test_city))
#predict crime level in test city using the crime model with 5 principal components
new_crime = predict(object=pcamodel, newdata = test_city, ncomp = 5)
#convert PCs back to original coefficients, then unscale
pcacoef5<-t(as.data.frame(coef(pcamodel5)))
pcacoef5<-pcacoef5/pcamodel5$scale
pcacoef5
intercept <- 1443 - 7169
intercept + sum(pcacoef5 * test_city)
#convert PCs back to original coefficients, then unscale
pcacoef5<-t(as.data.frame(coef(pcamodel5)))
pcacoef5<-pcacoef5/pcamodel5$scale
pcacoef5
intercept <- 1443 - 7169
intercept + sum(pcacoef5 * test_city)
View(pcamodel5)
View(pcamodel)
View(pcamodel5)
plot(pcamodel5)
summary(pcamodel5)
pcamodel5 <- pcr(Crime ~., data = uscrimedata, scale = TRUE, validation = "LOO", ncomp = 5)
summary(pcamodel5)
pcamodel5 <- pcr(Crime ~., data = uscrimedata, scale = TRUE, validation = "LOO", ncomp = 5)
########Predict
#create test city data frame - do not use So as it was not used when creating principal components
test_city <- c(M = 14.0,
Ed = 10.0, Po1 = 12.0,
Po2 = 15.5,LF = 0.640,
M.F = 94.0, Pop = 150,
NW = 1.1, U1 = 0.120,
U2 = 3.6, Wealth = 3200,
Ineq = 20.1, Prob = 0.04,
Time = 39.0)
test_city <- as.data.frame(t(test_city))
#predict crime level in test city using the crime model with 5 principal components
new_crime = predict(object=pcamodel, newdata = test_city, ncomp = 5)
#convert PCs back to original coefficients, then unscale
pcacoef5<-t(as.data.frame(coef(pcamodel5)))
pcacoef5<-pcacoef5/pcamodel5$scale
pcacoef5
intercept <- 1443 - 7169
intercept + sum(pcacoef5 * test_city)
#predict crime level in test city using the crime model with 5 principal components
new_crime = predict(object=pcamodel5, newdata = test_city, ncomp = 4)
#predict crime level in test city using the crime model with 5 principal components
new_crime = predict(object=pcamodel5, newdata = test_city, ncomp = 6)
#convert PCs back to original coefficients, then unscale
pcacoef5<-t(as.data.frame(coef(pcamodel5)))
#predict crime level in test city using the crime model with 5 principal components
new_crime = predict(object=pcamodel5, newdata = test_city, ncomp = 5)
#convert PCs back to original coefficients, then unscale
pcacoef5<-t(as.data.frame(coef(pcamodel5)))
pcacoef5<-pcacoef5/pcamodel5$scale
pcacoef5
intercept <- 1443 - 7169
intercept + sum(pcacoef5 * test_city)
coef(pcamodel5, intercept = TRUE)
intercept <- coef(pcamodel5, intercept = TRUE)
intercept <- coef(pcamodel5, intercept = TRUE)[,1]
intercept$intercept
intercept[,1]
intercept[1]
intercept <- coef(pcamodel5, intercept = TRUE)[1]
intercept
intercept + sum(pcacoef5 * test_city)
#manually caclculate Crime rate for test city using intercept, unscaled coefficients and test city - confirm matches 1443
intercept + sum(pcacoef5 * test_city)
loadingplot(pcamodel, 1:5)
scatterplot(pcamodel, 1:5)
scoreplot(pcamodel, 1:5)
corrplot(pcamodel, 1:5)
loadingplot(pcamodel, 1:5)
loadingplot(pcamodel, 1:5), identify = TRUE)
loadingplot(pcamodel, 1:5, identify = TRUE)
loadingplot(pcamodel, 1:5, legendpos = top)
loadingplot(pcamodel, 1:5, legendpos = "top")
loadingplot(pcamodel, 1:5, legendpos = "bottomleft")
#manually caclculate Crime rate for test city using intercept, unscaled coefficients and test city - confirm matches 1443
intercept + sum(pcacoef5 * test_city)
#convert PCs back to original coefficients, then unscale
pcacoef5<-t(as.data.frame(coef(pcamodel5)))
pcacoef5<-pcacoef5/pcamodel5$scale
pcacoef5
View(pcacoef5)
#get intercept from pcamodel5
intercept <- coef(pcamodel5, intercept = TRUE)[1]
coef(pcamodel5, intercept = TRUE)
#get intercept from pcamodel5
intercept <- pcacoef5[1]
#convert PCs back to original coefficients, then unscale
pcacoef5<-t(as.data.frame(coef(pcamodel5, intercept = TRUE)))
pca5coef
#convert PCs back to original coefficients, then unscale
pca5coef<-t(as.data.frame(coef(pcamodel5, intercept = TRUE)))
pca5coef<-pca5coef[1:14]/pcamodel5$scale
pca5coef
pca5coef<-pca5[1:14]/pcamodel5$scale
#convert PCs back to original coefficients, then unscale
pca5<-t(as.data.frame(coef(pcamodel5, intercept = TRUE)))
pca5coef<-pca5[1:14]/pcamodel5$scale
pca5
#get intercept from pcamodel5
intercept <- pcacoef5[1]
#get intercept from pcamodel5
intercept <- pca5[1]
#manually caclculate Crime rate for test city using intercept, unscaled coefficients and test city - confirm matches 1443
intercept + sum(pcacoef5 * test_city)
#manually caclculate Crime rate for test city using intercept, unscaled coefficients and test city - confirm matches 1443
intercept + sum(pca5coef * test_city)
#convert PCs back to original coefficients, then unscale
pca5<-t(as.data.frame(coef(pcamodel5, intercept = TRUE)))
pca5coef<-pca5[1:14]/pcamodel5$scale
pca5
#get intercept from pcamodel5
intercept <- pca5[1]
#manually caclculate Crime rate for test city using intercept, unscaled coefficients and test city - confirm matches 1443
intercept + sum(pca5coef * test_city)
#convert PCs back to original coefficients, then unscale
pca5<-t(as.data.frame(coef(pcamodel5, intercept = TRUE)))
pca5coef<-pca5[1:14]/pcamodel5$scale
pca5coef<-pca5[2:15]/pcamodel5$scale
pca5
#get intercept from pcamodel5
intercept <- pca5[1]
#manually caclculate Crime rate for test city using intercept, unscaled coefficients and test city - confirm matches 1443
intercept + sum(pca5coef * test_city)
ggplot(data = uscrime_melt, aes(x=value, y=Crime)) +
geom_point() +
facet_wrap(~variable, scales = "free")
loadingplot(pcamodel, 1:5, legendpos = "bottomleft", identify = TRUE)
loadingplot(pcamodel, 1:5, legendpos = "bottomleft")
